@page "/"
@using System.Text
@using System.IO
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Mvc
@using SharpAESCryptWASMCore.Shared
@using System.ComponentModel.DataAnnotations

@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService

<h1>Sharp AES Crypt WASM</h1>

<div class="row">
    <div class="col">
        <RadzenCard>
            <h4 class="mb-4">Selected File: @fileName</h4>
            <InputFile OnChange="HandleFileSelected" />
        </RadzenCard>
    </div>
    <div class="col">
        <RadzenCard>
            <h4 class="mb-4">Encryption Mode</h4>
            <RadzenSelectBar @bind-Value=@fileEncrypted TValue="bool">
                <Items>
                    <RadzenSelectBarItem Text="Encrypted" Value="true" />
                    <RadzenSelectBarItem Text="Decrypted" Value="false" />
                </Items>
            </RadzenSelectBar>
        </RadzenCard>
    </div>
</div>
<div class="row">
    <div class="col">
        <RadzenCard>
            <h4 class="mb-4">Password</h4>
            <RadzenPassword Change=@(args => PasswordOnChange(args, "Password")) Class="w-100" />
        </RadzenCard>
    </div>
    <div class="col">
        <RadzenCard>
            <h4 class="mb-4">Download File</h4>
            <RadzenButton Click=@(args => DownloadFileFromStream()) Text="Download" ButtonStyle="ButtonStyle.Primary" />
        </RadzenCard>
    </div>
</div>

@code{
    private IFileListEntry file { get; set; }
    private string fileName { get; set; }
    private string fileBase64 { get; set; }
    private string secretKey { get; set; }
    private string secretExtension { get { return ".aes"; }}
    private bool fileEncrypted { get; set; }
    private MemoryStream inputStream = new MemoryStream();
    private MemoryStream outputStream = new MemoryStream();

    private void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private void RadzenFileInputOnError(UploadErrorEventArgs args, string name)
    {
        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = args.Message, Duration = 4000 });
    }

    private async Task HandleFileSelected(IFileListEntry[] files)
    {
        file = files.FirstOrDefault();
        fileName = file.Name;

        MemoryStream memoryStream = new MemoryStream();
        await file.Data.CopyToAsync(memoryStream);
        fileBase64 = Convert.ToBase64String(memoryStream.ToArray());
    }

    private void PasswordOnChange(string value, string name)
    {
        secretKey = value;
    }

    private async Task<MemoryStream> GetFileStream()
    {
        if (fileEncrypted == true)
        {
            inputStream = new MemoryStream(Convert.FromBase64String(fileBase64));
            inputStream.Position = 0;

            SharpAESCrypt.Decrypt(secretKey, inputStream, outputStream);
            outputStream.Position = 0;
        }
        else
        {
            inputStream = new MemoryStream(Convert.FromBase64String(fileBase64));
            inputStream.Position = 0;

            SharpAESCrypt.Encrypt(secretKey, inputStream, outputStream);
            outputStream.Position = 0;
        }

        return outputStream;
    }

    private async Task DownloadFileFromStream()
    {
        if (!String.IsNullOrEmpty(fileName))
        {
            string getFileName = string.Empty;
            if(fileName.Contains(secretExtension))
            {
                getFileName = fileName.Replace(secretExtension, string.Empty);
            }
            else
            {
                getFileName = fileName + secretExtension;
            }

            var fileStream = await GetFileStream();

            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", getFileName, Convert.ToBase64String(fileStream.ToArray()));
        }
    }
}